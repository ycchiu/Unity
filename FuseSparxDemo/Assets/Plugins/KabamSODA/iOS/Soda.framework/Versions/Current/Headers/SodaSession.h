//
//  SodaSession.h
//  Soda
//
//  Created by Daniel Sell on 2/4/14.
//  Copyright (c) 2014 Kabam, Inc. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <StoreKit/StoreKit.h>
#import <Soda/SodaSettings.h>
#import <Soda/SodaError.h>

@protocol SodaSessionDelegate;


/**
 * SodaSession is used to authenticate and interact with WSKE.
 */
@interface SodaSession : NSObject

/// @name Getting Session information

/**
 * ID for the currently-authenticated player (or `nil`).
 */
@property (readonly, copy) NSString *playerId;

/// @name Getting Configuration

/**
 * Settings used to configure the SodaSession. By default this will be 
 * [SodaSettings sharedSettings].
 */
@property (readonly, retain) SodaSettings *settings;

/// @name Responding To Events

/**
 * An object with methods to handle session events.
 */
@property (weak) id<SodaSessionDelegate> delegate;

/// @name Initializing a SodaSession Object

/**
 * Returns an initialized SodaSession object with default configuration.
 * 
 * There will not be a delegate (one can always be set later) and settings will 
 * come from [SodaSettings sharedSettings].
 */
- (instancetype)init;

/**
 * Returns an initialized SodaSession object with the specified delegate.
 * 
 * @param delegate Event handlers.
 */
- (instancetype)initWithDelegate:(id<SodaSessionDelegate>)delegate;

/**
 * Returns an initialized SodaSession object with the specified delegate and 
 * settings.
 * 
 * @param delegate Event handlers.
 * @param settings SodaSession settings.
 */
- (instancetype)initWithDelegate:(id<SodaSessionDelegate>)delegate settings:(SodaSettings *)settings;

/// @name Working With Player Sessions

/**
 * Begin a player session.
 * 
 * Calling this method will automatically fetch a WSKE token which will be 
 * included in subsequent requests. Logging in will also log a "play" event to 
 * WSKE.
 * 
 * If there is already an active session, it will be logged out.
 * 
 * This method will trigger either `sessionLoginDidSucceed:` or 
 * `session:loginDidFailWithError:` on the delegate.
 * 
 * @param playerId Player ID.
 * @param certificate Certificate generated by a game server to authenticate 
 * players with WSKE.
 */
- (void)loginWithPlayerId:(NSString *)playerId playerCertificate:(NSString *)certificate;

/**
 * Invalidate the token for an authenticated SodaSession (if any).
 */
- (void)logout;

/**
 * Check the login state of a SodaSession.
 * 
 * @return `YES` if the session has an active WSKE token, otherwise `NO`.
 * 
 * @warning Currently does not verify that the session token is still valid 
 * with WSKE (it may have expired).
 */
- (BOOL)isLoggedIn;

/// @name Registering Events With WSKE

/**
 * Log a revenue event with WSKE. Note that this information is not considered 
 * trustworthy until corroborated with revenue events logged from game servers.
 * 
 * @param transaction App Store payment transaction.
 * 
 * @warning Currently a stub.
 */
- (void)logRevenueEvent:(SKPaymentTransaction *)transaction;

/// @name Convenience Methods

/**
 * A globally-accessible SodaSession instance.
 * 
 * This is just a convenient alternative to keeping track of your own session 
 * object.
 * 
 * @return Shared session instance.
 */
+ (instancetype)activeSession;

@end


/**
 * The SodaSessionDelegate protocol defines methods that your delegate object
 * can implement to respond to SodaSession events. All methods are optional.
 */
@protocol SodaSessionDelegate <NSObject>
@optional

/**
 * Called when a login succeeded. After this point the associated SodaSession
 * should have a valid WSKE token.
 *
 * @param session The session which logged in.
 */
- (void)sessionLoginDidSucceed:(SodaSession *)session;

/**
 * Called when a login failed.
 *
 * @param session The session which failed to log in.
 * @param error Information about the failure.
 *
 * @see SodaErrorCode
 */
- (void)session:(SodaSession *)session loginDidFailWithError:(NSError *)error;

/**
 * Called when an event was logged successfully.
 *
 * @param session The session which successfully logged an event.
 * @param event The event that was logged.
 */
- (void)session:(SodaSession *)session logEventDidSucceed:(NSString *)event;

/**
 * Called when an attempt to log an event has failed.
 *
 * @param session The session which failed to log an event.
 * @param event The event that failed to be logged.
 * @param error Information about the failure.
 *
 * @see SodaErrorCode
 */
- (void)session:(SodaSession *)session logEventDidFail:(NSString *)event withError:(NSError *)error;

/**
 * Called when the session's player certificate has expired. The suggested
 * behavior for this method is to call [SodaSession
 * loginWithPlayerId:playerCertificate:] with a freshly-generated certificate.
 *
 * @param session The session whose player certificate has expired.
 * @param error Information about the failure.
 *
 * @see SodaErrorCode
 */
- (void)session:(SodaSession *)session playerCertificateDidExpireWithError:(NSError *)error;
@end
